How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    diff showed the lines that were edited, moved, added, or removed with.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having access to the entire history will help the programmer determine how the code evolved as new features were added and new people worked on it. If there is a bug in the code, a programmer can check each commit to determine at one point was the bug introduced.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros:
    - You can commit when you know there are no bugs in the code.
    - Commit only when there is a significant logical change.
    Cons:
    - You can forget to commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Google Doc files are mostly independent and they are saved in real time.
    While complex program files are dependent and consts one logical group change.

How can you use the commands git log and git diff to view the history of files?

     git log can be used to list the summaries, times, contributors, and changes made to the repositories. git diff can be used to see which files were changed and how between two given commits.

How might using version control make you more confident to make changes that
could break something?

    I can commit code and make changes to it without fearing that I might lose my progress. I can safely experiment and make significant changes without breaking the program. Also I would be able to review code and learn how bugs were introduced and solved.

Now that you have your workspace set up, what do you want to try using Git for?

    Using Git to commit my project and work on my first portfolio.

