What happens when you initialize a repository? Why do you need to do it?

    When you run git init you, an empty repository is created. It contains no commit. Git init is run manually so only the files that you want to commit later are tracked.


How is the staging area different from the working directory and the repository? What value do you think it offers?

    Staging area is the preparation area for files to be committed. The staging area helps to keep the files and commits separate and organized into several commits. Each commit  consists of changes that represent a logical change to the relevant files.

How can you use the staging area to make sure you have one commit per logical change?

    By adding the file to the staging area after a logical change. This way if there is another logical change made, you will see that the file has been modified when running git status command.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

    Branches help teams to organize their work into separate tasks - especially when creating a new feauture, experimenting, or when multiple people are working on separate features using the same code. For example if one programmer is creating an easy-mode and an another programmer is working on hard-mode for the same game at the same time. The main 'master' branch stays intact until the branches are ready to merge.

How do the diagrams help you visualize the branch structure?

    The diagrams helps me visualize where the new branches have been created, which features and bug fixes other teams are workings on, and at what point branches are merged with the master branch. The diagram also helps visualize which commits are reachable from each branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    Merging two branches together incorporates the changes made in both branches into a new commit. This way multiple teams can work on independent projects on separate branches and only merge the branches once the code is working. In the diagram, it is represented that the two branches come in together and the master branch is extended.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    Git's automatic merging can save a lot of time since the code is reviewed automatically. This can save a lot of time because if there are conflicts during the merge, the user is notified of any changes made to the same function.

    However, the downside is that Git's automatic merging is not perfect and can lead to broken code. For example, if one person deleted one function on one branch, but someone else added a call to the deleted function on another branch then the code will break. Users should always double check the merge was successful each time before moving to another project.